syntax = "proto3";

package signer;
option go_package = "ecdsa-tss/signer/proto;proto";

service SignerService {
  rpc DKG(stream DKGRequest) returns (stream DKGResponse);
  rpc Sign(stream SignRequest) returns (stream SignResponse);
  rpc Pk(PkRequest) returns (PkResponse);
  rpc CheckPk(CheckPkRequest) returns (CheckPkResponse);
}
// curve_id 0 for S256, 1 for P256
message BaseInfo {
  uint32 curve_id = 1;
  uint32 id = 2;
  uint32 threshold = 3;
  repeated uint32 ids = 4;
}
message SigningInfo {
  BaseInfo base_info = 1;
  KeyPackage key_package = 2;
  bytes message = 3;
  bytes derivation_delta = 4;
}
message KeyPackage {
  bytes key_package = 1;
  // optional in request
  bytes public_key = 2;
}
message Signature {
  bytes signature = 1;
  bytes public_key = 2;
  bytes public_key_derived = 3;
}
message PkRequest {
  uint32 curve_id = 1;
  oneof source {
    KeyPackage key_package = 2;
    bytes public_key = 3;
  }
  bytes derivation_delta = 4;
}
message PkResponse {
  bytes public_key = 1;
  bytes public_key_derived = 2;
}

message CheckPkRequest {
  uint32 crypto_type = 1;
  bytes pkid = 2;
  bytes public_key = 3;
  bytes public_key_derived = 4;
  bytes delta = 5;
  repeated uint32 signer_id = 6;
  repeated bytes public_key_info = 7;
}
message CheckPkResponse {
  bool is_valid = 1;
  string error = 2;
}
message SignerToCoordinatorMsg {
  bytes msg = 1;
  bool is_broadcast = 2;
  uint32 to = 3;
}
message CoordinatorToSignerMsg {
  bytes msg = 1;
  bool is_broadcast = 2;
  uint32 from = 3;
}

// from rust to go
message DKGRequest {
  // init / intermediate
  string req_type = 1;
  BaseInfo base_info = 2;
  // if is intermediate, coordinator_to_signer_msg is not nil
  CoordinatorToSignerMsg coordinator_to_signer_msg = 3;
}
message DKGResponse {
  // intermediate / final / empty / error
  // the first response from coordinator to signer must be empty, since go-grpc will not send header for connection and tonic client will be blocked
  // see the issue in https://github.com/hyperium/tonic/issues/515
  string resp_type = 1;
  // if is final, data is key package
  KeyPackage key_package = 2;
  // if is intermediate, signer_to_coordinator_msg is not nil
  SignerToCoordinatorMsg signer_to_coordinator_msg = 3;
  // if is error, error is not nil
  string error = 4;
}

message SignRequest{
  // init / intermediate 
  string req_type = 1;
  SigningInfo signing_info = 2;
  // if is intermediate, coordinator_to_signer_msg is not nil
  CoordinatorToSignerMsg coordinator_to_signer_msg = 3;
}


message SignResponse{
  // intermediate / final / empty / error
  // the first response from signer to coordinator must be empty, since go-grpc will not send header for connection and tonic client will be blocked
  // see the issue in https://github.com/hyperium/tonic/issues/515
  string resp_type = 1;
  // if is final, data is signature
  Signature signature = 2;
  // if is intermediate, signer_to_coordinator_msg is not nil
  SignerToCoordinatorMsg signer_to_coordinator_msg = 3;
  // if is error, error is not nil
  string error = 4;
}