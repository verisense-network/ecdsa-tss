// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: proto/signer.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// curve_id 0 for S256, 1 for P256
type BaseInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CurveId       uint32                 `protobuf:"varint,1,opt,name=curve_id,json=curveId,proto3" json:"curve_id,omitempty"`
	Id            uint32                 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Threshold     uint32                 `protobuf:"varint,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Ids           []uint32               `protobuf:"varint,4,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BaseInfo) Reset() {
	*x = BaseInfo{}
	mi := &file_proto_signer_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseInfo) ProtoMessage() {}

func (x *BaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_signer_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseInfo.ProtoReflect.Descriptor instead.
func (*BaseInfo) Descriptor() ([]byte, []int) {
	return file_proto_signer_proto_rawDescGZIP(), []int{0}
}

func (x *BaseInfo) GetCurveId() uint32 {
	if x != nil {
		return x.CurveId
	}
	return 0
}

func (x *BaseInfo) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BaseInfo) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *BaseInfo) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type SigningInfo struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	BaseInfo        *BaseInfo              `protobuf:"bytes,1,opt,name=base_info,json=baseInfo,proto3" json:"base_info,omitempty"`
	KeyPackage      *KeyPackage            `protobuf:"bytes,2,opt,name=key_package,json=keyPackage,proto3" json:"key_package,omitempty"`
	Message         []byte                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	DerivationDelta []byte                 `protobuf:"bytes,4,opt,name=derivation_delta,json=derivationDelta,proto3" json:"derivation_delta,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SigningInfo) Reset() {
	*x = SigningInfo{}
	mi := &file_proto_signer_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningInfo) ProtoMessage() {}

func (x *SigningInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_signer_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningInfo.ProtoReflect.Descriptor instead.
func (*SigningInfo) Descriptor() ([]byte, []int) {
	return file_proto_signer_proto_rawDescGZIP(), []int{1}
}

func (x *SigningInfo) GetBaseInfo() *BaseInfo {
	if x != nil {
		return x.BaseInfo
	}
	return nil
}

func (x *SigningInfo) GetKeyPackage() *KeyPackage {
	if x != nil {
		return x.KeyPackage
	}
	return nil
}

func (x *SigningInfo) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *SigningInfo) GetDerivationDelta() []byte {
	if x != nil {
		return x.DerivationDelta
	}
	return nil
}

type KeyPackage struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	KeyPackage []byte                 `protobuf:"bytes,1,opt,name=key_package,json=keyPackage,proto3" json:"key_package,omitempty"`
	// optional in request
	PublicKey     []byte `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyPackage) Reset() {
	*x = KeyPackage{}
	mi := &file_proto_signer_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyPackage) ProtoMessage() {}

func (x *KeyPackage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_signer_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyPackage.ProtoReflect.Descriptor instead.
func (*KeyPackage) Descriptor() ([]byte, []int) {
	return file_proto_signer_proto_rawDescGZIP(), []int{2}
}

func (x *KeyPackage) GetKeyPackage() []byte {
	if x != nil {
		return x.KeyPackage
	}
	return nil
}

func (x *KeyPackage) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type Signature struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Signature        []byte                 `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	PublicKey        []byte                 `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	PublicKeyDerived []byte                 `protobuf:"bytes,3,opt,name=public_key_derived,json=publicKeyDerived,proto3" json:"public_key_derived,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Signature) Reset() {
	*x = Signature{}
	mi := &file_proto_signer_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature) ProtoMessage() {}

func (x *Signature) ProtoReflect() protoreflect.Message {
	mi := &file_proto_signer_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature.ProtoReflect.Descriptor instead.
func (*Signature) Descriptor() ([]byte, []int) {
	return file_proto_signer_proto_rawDescGZIP(), []int{3}
}

func (x *Signature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Signature) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *Signature) GetPublicKeyDerived() []byte {
	if x != nil {
		return x.PublicKeyDerived
	}
	return nil
}

type PkRequest struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	CurveId uint32                 `protobuf:"varint,1,opt,name=curve_id,json=curveId,proto3" json:"curve_id,omitempty"`
	// Types that are valid to be assigned to Source:
	//
	//	*PkRequest_KeyPackage
	//	*PkRequest_PublicKey
	Source          isPkRequest_Source `protobuf_oneof:"source"`
	DerivationDelta []byte             `protobuf:"bytes,4,opt,name=derivation_delta,json=derivationDelta,proto3" json:"derivation_delta,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PkRequest) Reset() {
	*x = PkRequest{}
	mi := &file_proto_signer_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PkRequest) ProtoMessage() {}

func (x *PkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_signer_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PkRequest.ProtoReflect.Descriptor instead.
func (*PkRequest) Descriptor() ([]byte, []int) {
	return file_proto_signer_proto_rawDescGZIP(), []int{4}
}

func (x *PkRequest) GetCurveId() uint32 {
	if x != nil {
		return x.CurveId
	}
	return 0
}

func (x *PkRequest) GetSource() isPkRequest_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *PkRequest) GetKeyPackage() *KeyPackage {
	if x != nil {
		if x, ok := x.Source.(*PkRequest_KeyPackage); ok {
			return x.KeyPackage
		}
	}
	return nil
}

func (x *PkRequest) GetPublicKey() []byte {
	if x != nil {
		if x, ok := x.Source.(*PkRequest_PublicKey); ok {
			return x.PublicKey
		}
	}
	return nil
}

func (x *PkRequest) GetDerivationDelta() []byte {
	if x != nil {
		return x.DerivationDelta
	}
	return nil
}

type isPkRequest_Source interface {
	isPkRequest_Source()
}

type PkRequest_KeyPackage struct {
	KeyPackage *KeyPackage `protobuf:"bytes,2,opt,name=key_package,json=keyPackage,proto3,oneof"`
}

type PkRequest_PublicKey struct {
	PublicKey []byte `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3,oneof"`
}

func (*PkRequest_KeyPackage) isPkRequest_Source() {}

func (*PkRequest_PublicKey) isPkRequest_Source() {}

type PkResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	PublicKey        []byte                 `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	PublicKeyDerived []byte                 `protobuf:"bytes,2,opt,name=public_key_derived,json=publicKeyDerived,proto3" json:"public_key_derived,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PkResponse) Reset() {
	*x = PkResponse{}
	mi := &file_proto_signer_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PkResponse) ProtoMessage() {}

func (x *PkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_signer_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PkResponse.ProtoReflect.Descriptor instead.
func (*PkResponse) Descriptor() ([]byte, []int) {
	return file_proto_signer_proto_rawDescGZIP(), []int{5}
}

func (x *PkResponse) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *PkResponse) GetPublicKeyDerived() []byte {
	if x != nil {
		return x.PublicKeyDerived
	}
	return nil
}

type SignerToCoordinatorMsg struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Msg           []byte                 `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	IsBroadcast   bool                   `protobuf:"varint,2,opt,name=is_broadcast,json=isBroadcast,proto3" json:"is_broadcast,omitempty"`
	To            uint32                 `protobuf:"varint,3,opt,name=to,proto3" json:"to,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignerToCoordinatorMsg) Reset() {
	*x = SignerToCoordinatorMsg{}
	mi := &file_proto_signer_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignerToCoordinatorMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignerToCoordinatorMsg) ProtoMessage() {}

func (x *SignerToCoordinatorMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_signer_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignerToCoordinatorMsg.ProtoReflect.Descriptor instead.
func (*SignerToCoordinatorMsg) Descriptor() ([]byte, []int) {
	return file_proto_signer_proto_rawDescGZIP(), []int{6}
}

func (x *SignerToCoordinatorMsg) GetMsg() []byte {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *SignerToCoordinatorMsg) GetIsBroadcast() bool {
	if x != nil {
		return x.IsBroadcast
	}
	return false
}

func (x *SignerToCoordinatorMsg) GetTo() uint32 {
	if x != nil {
		return x.To
	}
	return 0
}

type CoordinatorToSignerMsg struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Msg           []byte                 `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	IsBroadcast   bool                   `protobuf:"varint,2,opt,name=is_broadcast,json=isBroadcast,proto3" json:"is_broadcast,omitempty"`
	From          uint32                 `protobuf:"varint,3,opt,name=from,proto3" json:"from,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CoordinatorToSignerMsg) Reset() {
	*x = CoordinatorToSignerMsg{}
	mi := &file_proto_signer_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CoordinatorToSignerMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoordinatorToSignerMsg) ProtoMessage() {}

func (x *CoordinatorToSignerMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_signer_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoordinatorToSignerMsg.ProtoReflect.Descriptor instead.
func (*CoordinatorToSignerMsg) Descriptor() ([]byte, []int) {
	return file_proto_signer_proto_rawDescGZIP(), []int{7}
}

func (x *CoordinatorToSignerMsg) GetMsg() []byte {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *CoordinatorToSignerMsg) GetIsBroadcast() bool {
	if x != nil {
		return x.IsBroadcast
	}
	return false
}

func (x *CoordinatorToSignerMsg) GetFrom() uint32 {
	if x != nil {
		return x.From
	}
	return 0
}

// from rust to go
type DKGRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// init / intermediate
	ReqType  string    `protobuf:"bytes,1,opt,name=req_type,json=reqType,proto3" json:"req_type,omitempty"`
	BaseInfo *BaseInfo `protobuf:"bytes,2,opt,name=base_info,json=baseInfo,proto3" json:"base_info,omitempty"`
	// if is intermediate, coordinator_to_signer_msg is not nil
	CoordinatorToSignerMsg *CoordinatorToSignerMsg `protobuf:"bytes,3,opt,name=coordinator_to_signer_msg,json=coordinatorToSignerMsg,proto3" json:"coordinator_to_signer_msg,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *DKGRequest) Reset() {
	*x = DKGRequest{}
	mi := &file_proto_signer_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DKGRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DKGRequest) ProtoMessage() {}

func (x *DKGRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_signer_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DKGRequest.ProtoReflect.Descriptor instead.
func (*DKGRequest) Descriptor() ([]byte, []int) {
	return file_proto_signer_proto_rawDescGZIP(), []int{8}
}

func (x *DKGRequest) GetReqType() string {
	if x != nil {
		return x.ReqType
	}
	return ""
}

func (x *DKGRequest) GetBaseInfo() *BaseInfo {
	if x != nil {
		return x.BaseInfo
	}
	return nil
}

func (x *DKGRequest) GetCoordinatorToSignerMsg() *CoordinatorToSignerMsg {
	if x != nil {
		return x.CoordinatorToSignerMsg
	}
	return nil
}

type DKGResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// intermediate / final / empty / error
	// the first response from coordinator to signer must be empty, since go-grpc will not send header for connection and tonic client will be blocked
	// see the issue in https://github.com/hyperium/tonic/issues/515
	RespType string `protobuf:"bytes,1,opt,name=resp_type,json=respType,proto3" json:"resp_type,omitempty"`
	// if is final, data is key package
	KeyPackage *KeyPackage `protobuf:"bytes,2,opt,name=key_package,json=keyPackage,proto3" json:"key_package,omitempty"`
	// if is intermediate, signer_to_coordinator_msg is not nil
	SignerToCoordinatorMsg *SignerToCoordinatorMsg `protobuf:"bytes,3,opt,name=signer_to_coordinator_msg,json=signerToCoordinatorMsg,proto3" json:"signer_to_coordinator_msg,omitempty"`
	// if is error, error is not nil
	Error         string `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DKGResponse) Reset() {
	*x = DKGResponse{}
	mi := &file_proto_signer_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DKGResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DKGResponse) ProtoMessage() {}

func (x *DKGResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_signer_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DKGResponse.ProtoReflect.Descriptor instead.
func (*DKGResponse) Descriptor() ([]byte, []int) {
	return file_proto_signer_proto_rawDescGZIP(), []int{9}
}

func (x *DKGResponse) GetRespType() string {
	if x != nil {
		return x.RespType
	}
	return ""
}

func (x *DKGResponse) GetKeyPackage() *KeyPackage {
	if x != nil {
		return x.KeyPackage
	}
	return nil
}

func (x *DKGResponse) GetSignerToCoordinatorMsg() *SignerToCoordinatorMsg {
	if x != nil {
		return x.SignerToCoordinatorMsg
	}
	return nil
}

func (x *DKGResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type SignRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// init / intermediate
	ReqType     string       `protobuf:"bytes,1,opt,name=req_type,json=reqType,proto3" json:"req_type,omitempty"`
	SigningInfo *SigningInfo `protobuf:"bytes,2,opt,name=signing_info,json=signingInfo,proto3" json:"signing_info,omitempty"`
	// if is intermediate, coordinator_to_signer_msg is not nil
	CoordinatorToSignerMsg *CoordinatorToSignerMsg `protobuf:"bytes,3,opt,name=coordinator_to_signer_msg,json=coordinatorToSignerMsg,proto3" json:"coordinator_to_signer_msg,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *SignRequest) Reset() {
	*x = SignRequest{}
	mi := &file_proto_signer_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignRequest) ProtoMessage() {}

func (x *SignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_signer_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignRequest.ProtoReflect.Descriptor instead.
func (*SignRequest) Descriptor() ([]byte, []int) {
	return file_proto_signer_proto_rawDescGZIP(), []int{10}
}

func (x *SignRequest) GetReqType() string {
	if x != nil {
		return x.ReqType
	}
	return ""
}

func (x *SignRequest) GetSigningInfo() *SigningInfo {
	if x != nil {
		return x.SigningInfo
	}
	return nil
}

func (x *SignRequest) GetCoordinatorToSignerMsg() *CoordinatorToSignerMsg {
	if x != nil {
		return x.CoordinatorToSignerMsg
	}
	return nil
}

type SignResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// intermediate / final / empty / error
	// the first response from signer to coordinator must be empty, since go-grpc will not send header for connection and tonic client will be blocked
	// see the issue in https://github.com/hyperium/tonic/issues/515
	RespType string `protobuf:"bytes,1,opt,name=resp_type,json=respType,proto3" json:"resp_type,omitempty"`
	// if is final, data is signature
	Signature *Signature `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// if is intermediate, signer_to_coordinator_msg is not nil
	SignerToCoordinatorMsg *SignerToCoordinatorMsg `protobuf:"bytes,3,opt,name=signer_to_coordinator_msg,json=signerToCoordinatorMsg,proto3" json:"signer_to_coordinator_msg,omitempty"`
	// if is error, error is not nil
	Error         string `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignResponse) Reset() {
	*x = SignResponse{}
	mi := &file_proto_signer_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignResponse) ProtoMessage() {}

func (x *SignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_signer_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignResponse.ProtoReflect.Descriptor instead.
func (*SignResponse) Descriptor() ([]byte, []int) {
	return file_proto_signer_proto_rawDescGZIP(), []int{11}
}

func (x *SignResponse) GetRespType() string {
	if x != nil {
		return x.RespType
	}
	return ""
}

func (x *SignResponse) GetSignature() *Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *SignResponse) GetSignerToCoordinatorMsg() *SignerToCoordinatorMsg {
	if x != nil {
		return x.SignerToCoordinatorMsg
	}
	return nil
}

func (x *SignResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_proto_signer_proto protoreflect.FileDescriptor

var file_proto_signer_proto_rawDesc = string([]byte{
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x22, 0x65, 0x0a, 0x08,
	0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x76,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x75, 0x72, 0x76,
	0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03,
	0x69, 0x64, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x0b, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x33, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72,
	0x2e, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x6b, 0x65, 0x79,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x64, 0x65, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x22, 0x4c, 0x0a, 0x0a,
	0x4b, 0x65, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x65,
	0x79, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x6b, 0x65, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x76, 0x0a, 0x09, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x72, 0x69, 0x76,
	0x65, 0x64, 0x22, 0xb3, 0x01, 0x0a, 0x09, 0x50, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x63, 0x75, 0x72, 0x76, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0b, 0x6b,
	0x65, 0x79, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x6b, 0x65, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x64,
	0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x42, 0x08,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x59, 0x0a, 0x0a, 0x50, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x72, 0x69,
	0x76, 0x65, 0x64, 0x22, 0x5d, 0x0a, 0x16, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x54, 0x6f, 0x43,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x74, 0x6f, 0x22, 0x61, 0x0a, 0x16, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x54, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x22, 0xb1, 0x01, 0x0a, 0x0a, 0x44, 0x4b, 0x47, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x71, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2d, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x59,
	0x0a, 0x19, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x6f,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x4d, 0x73,
	0x67, 0x52, 0x16, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x6f,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x22, 0xd0, 0x01, 0x0a, 0x0b, 0x44, 0x4b,
	0x47, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x73,
	0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52,
	0x0a, 0x6b, 0x65, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x59, 0x0a, 0x19, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x54, 0x6f,
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x16,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xbb, 0x01, 0x0a,
	0x0b, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x72, 0x65, 0x71, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x72, 0x65, 0x71, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x59, 0x0a, 0x19, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74,
	0x6f, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x4d,
	0x73, 0x67, 0x52, 0x16, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x54,
	0x6f, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x22, 0xcd, 0x01, 0x0a, 0x0c, 0x53,
	0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x65, 0x73, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x59, 0x0a, 0x19, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x72, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6f,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x16, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x32, 0xa7, 0x01, 0x0a, 0x0d, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x03,
	0x44, 0x4b, 0x47, 0x12, 0x12, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x2e, 0x44, 0x4b, 0x47,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72,
	0x2e, 0x44, 0x4b, 0x47, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01,
	0x12, 0x35, 0x0a, 0x04, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x13, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x72, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x2b, 0x0a, 0x02, 0x50, 0x6b, 0x12, 0x11, 0x2e,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x2e, 0x50, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x12, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x2e, 0x50, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x1e, 0x5a, 0x1c, 0x65, 0x63, 0x64, 0x73, 0x61, 0x2d, 0x74, 0x73,
	0x73, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_proto_signer_proto_rawDescOnce sync.Once
	file_proto_signer_proto_rawDescData []byte
)

func file_proto_signer_proto_rawDescGZIP() []byte {
	file_proto_signer_proto_rawDescOnce.Do(func() {
		file_proto_signer_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_signer_proto_rawDesc), len(file_proto_signer_proto_rawDesc)))
	})
	return file_proto_signer_proto_rawDescData
}

var file_proto_signer_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_proto_signer_proto_goTypes = []any{
	(*BaseInfo)(nil),               // 0: signer.BaseInfo
	(*SigningInfo)(nil),            // 1: signer.SigningInfo
	(*KeyPackage)(nil),             // 2: signer.KeyPackage
	(*Signature)(nil),              // 3: signer.Signature
	(*PkRequest)(nil),              // 4: signer.PkRequest
	(*PkResponse)(nil),             // 5: signer.PkResponse
	(*SignerToCoordinatorMsg)(nil), // 6: signer.SignerToCoordinatorMsg
	(*CoordinatorToSignerMsg)(nil), // 7: signer.CoordinatorToSignerMsg
	(*DKGRequest)(nil),             // 8: signer.DKGRequest
	(*DKGResponse)(nil),            // 9: signer.DKGResponse
	(*SignRequest)(nil),            // 10: signer.SignRequest
	(*SignResponse)(nil),           // 11: signer.SignResponse
}
var file_proto_signer_proto_depIdxs = []int32{
	0,  // 0: signer.SigningInfo.base_info:type_name -> signer.BaseInfo
	2,  // 1: signer.SigningInfo.key_package:type_name -> signer.KeyPackage
	2,  // 2: signer.PkRequest.key_package:type_name -> signer.KeyPackage
	0,  // 3: signer.DKGRequest.base_info:type_name -> signer.BaseInfo
	7,  // 4: signer.DKGRequest.coordinator_to_signer_msg:type_name -> signer.CoordinatorToSignerMsg
	2,  // 5: signer.DKGResponse.key_package:type_name -> signer.KeyPackage
	6,  // 6: signer.DKGResponse.signer_to_coordinator_msg:type_name -> signer.SignerToCoordinatorMsg
	1,  // 7: signer.SignRequest.signing_info:type_name -> signer.SigningInfo
	7,  // 8: signer.SignRequest.coordinator_to_signer_msg:type_name -> signer.CoordinatorToSignerMsg
	3,  // 9: signer.SignResponse.signature:type_name -> signer.Signature
	6,  // 10: signer.SignResponse.signer_to_coordinator_msg:type_name -> signer.SignerToCoordinatorMsg
	8,  // 11: signer.SignerService.DKG:input_type -> signer.DKGRequest
	10, // 12: signer.SignerService.Sign:input_type -> signer.SignRequest
	4,  // 13: signer.SignerService.Pk:input_type -> signer.PkRequest
	9,  // 14: signer.SignerService.DKG:output_type -> signer.DKGResponse
	11, // 15: signer.SignerService.Sign:output_type -> signer.SignResponse
	5,  // 16: signer.SignerService.Pk:output_type -> signer.PkResponse
	14, // [14:17] is the sub-list for method output_type
	11, // [11:14] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_proto_signer_proto_init() }
func file_proto_signer_proto_init() {
	if File_proto_signer_proto != nil {
		return
	}
	file_proto_signer_proto_msgTypes[4].OneofWrappers = []any{
		(*PkRequest_KeyPackage)(nil),
		(*PkRequest_PublicKey)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_signer_proto_rawDesc), len(file_proto_signer_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_signer_proto_goTypes,
		DependencyIndexes: file_proto_signer_proto_depIdxs,
		MessageInfos:      file_proto_signer_proto_msgTypes,
	}.Build()
	File_proto_signer_proto = out.File
	file_proto_signer_proto_goTypes = nil
	file_proto_signer_proto_depIdxs = nil
}
