// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/signer.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SignerService_DKG_FullMethodName  = "/signer.SignerService/DKG"
	SignerService_Sign_FullMethodName = "/signer.SignerService/Sign"
	SignerService_Pk_FullMethodName   = "/signer.SignerService/Pk"
)

// SignerServiceClient is the client API for SignerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SignerServiceClient interface {
	DKG(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DKGRequest, DKGResponse], error)
	Sign(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SignRequest, SignResponse], error)
	Pk(ctx context.Context, in *PkRequest, opts ...grpc.CallOption) (*PkResponse, error)
}

type signerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSignerServiceClient(cc grpc.ClientConnInterface) SignerServiceClient {
	return &signerServiceClient{cc}
}

func (c *signerServiceClient) DKG(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DKGRequest, DKGResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SignerService_ServiceDesc.Streams[0], SignerService_DKG_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DKGRequest, DKGResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SignerService_DKGClient = grpc.BidiStreamingClient[DKGRequest, DKGResponse]

func (c *signerServiceClient) Sign(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SignRequest, SignResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SignerService_ServiceDesc.Streams[1], SignerService_Sign_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SignRequest, SignResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SignerService_SignClient = grpc.BidiStreamingClient[SignRequest, SignResponse]

func (c *signerServiceClient) Pk(ctx context.Context, in *PkRequest, opts ...grpc.CallOption) (*PkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PkResponse)
	err := c.cc.Invoke(ctx, SignerService_Pk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SignerServiceServer is the server API for SignerService service.
// All implementations must embed UnimplementedSignerServiceServer
// for forward compatibility.
type SignerServiceServer interface {
	DKG(grpc.BidiStreamingServer[DKGRequest, DKGResponse]) error
	Sign(grpc.BidiStreamingServer[SignRequest, SignResponse]) error
	Pk(context.Context, *PkRequest) (*PkResponse, error)
	mustEmbedUnimplementedSignerServiceServer()
}

// UnimplementedSignerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSignerServiceServer struct{}

func (UnimplementedSignerServiceServer) DKG(grpc.BidiStreamingServer[DKGRequest, DKGResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DKG not implemented")
}
func (UnimplementedSignerServiceServer) Sign(grpc.BidiStreamingServer[SignRequest, SignResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Sign not implemented")
}
func (UnimplementedSignerServiceServer) Pk(context.Context, *PkRequest) (*PkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pk not implemented")
}
func (UnimplementedSignerServiceServer) mustEmbedUnimplementedSignerServiceServer() {}
func (UnimplementedSignerServiceServer) testEmbeddedByValue()                       {}

// UnsafeSignerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SignerServiceServer will
// result in compilation errors.
type UnsafeSignerServiceServer interface {
	mustEmbedUnimplementedSignerServiceServer()
}

func RegisterSignerServiceServer(s grpc.ServiceRegistrar, srv SignerServiceServer) {
	// If the following call pancis, it indicates UnimplementedSignerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SignerService_ServiceDesc, srv)
}

func _SignerService_DKG_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SignerServiceServer).DKG(&grpc.GenericServerStream[DKGRequest, DKGResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SignerService_DKGServer = grpc.BidiStreamingServer[DKGRequest, DKGResponse]

func _SignerService_Sign_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SignerServiceServer).Sign(&grpc.GenericServerStream[SignRequest, SignResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SignerService_SignServer = grpc.BidiStreamingServer[SignRequest, SignResponse]

func _SignerService_Pk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignerServiceServer).Pk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignerService_Pk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignerServiceServer).Pk(ctx, req.(*PkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SignerService_ServiceDesc is the grpc.ServiceDesc for SignerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SignerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "signer.SignerService",
	HandlerType: (*SignerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Pk",
			Handler:    _SignerService_Pk_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DKG",
			Handler:       _SignerService_DKG_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Sign",
			Handler:       _SignerService_Sign_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/signer.proto",
}
